{"version":3,"sources":["webpack:///./src/css/index.less?ba24","css/index.less","webpack:///./src/css/Map.less?0514","css/Map.less","Map.js","App.js","serviceWorker.js","index.js"],"names":["content","__webpack_require__","module","i","options","hmr","transform","insertInto","undefined","locals","exports","push","Map","_this","this","ymaps","ready","lat","lon","marker","props","children","React","isValidElement","lan","myMap","center","zoom","myPlacemark","GeoObject","geometry","type","coordinates","geoObjects","add","react_default","a","createElement","id","Component","Marker","propTypes","PropTypes","number","isRequired","App","state","showMap","className","onClick","setState","bind","src_Map","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"gHACA,IAAAA,EAAcC,EAAQ,IAEtB,kBAAAD,MAAA,EAA4CE,EAAAC,EAASH,EAAA,MAOrD,IAAAI,EAAA,CAAeC,KAAA,EAEfC,eAPAA,EAQAC,gBAAAC,GAEaP,EAAQ,EAARA,CAA2DD,EAAAI,GAExEJ,EAAAS,SAAAP,EAAAQ,QAAAV,EAAAS,6BCjBAP,EAAAQ,QAA2BT,EAAQ,EAARA,EAAuD,IAKlFU,KAAA,CAAcT,EAAAC,EAAS,iuCAAusC,yBCJ9tC,IAAAH,EAAcC,EAAQ,IAEtB,kBAAAD,MAAA,EAA4CE,EAAAC,EAASH,EAAA,MAOrD,IAAAI,EAAA,CAAeC,KAAA,EAEfC,eAPAA,EAQAC,gBAAAC,GAEaP,EAAQ,EAARA,CAA2DD,EAAAI,GAExEJ,EAAAS,SAAAP,EAAAQ,QAAAV,EAAAS,6BCjBAP,EAAAQ,QAA2BT,EAAQ,EAARA,EAAuD,IAKlFU,KAAA,CAAcT,EAAAC,EAAS,+SAAqQ,6ICiC7QS,qMA/BM,IAAAC,EAAAC,KACnBC,MAAMC,MAAM,WACX,IAAIC,EAAM,MACNC,EAAK,MACHC,EAASN,EAAKO,MAAMC,SAAS,GAC/BC,IAAMC,eAAeJ,KACxBF,EAAME,EAAOC,MAAMI,IACnBN,EAAMC,EAAOC,MAAMF,KAEpB,IAAIO,EAAQ,IAAIV,MAAMH,IAAI,MAAO,CAChCc,OAAQ,CAACT,EAAKC,GACdS,KAAM,IAEHC,EAAc,IAAIb,MAAMc,UAAU,CACrCC,SAAU,CACTC,KAAM,QACNC,YAAa,CAACf,EAAKC,MAGrBO,EAAMQ,WAAWC,IAAIN,sCAKtB,OACCO,EAAAC,EAAAC,cAAA,OAAKC,GAAG,eA3BOC,cCAZC,EAAS,kBAAM,GACrBA,EAAOC,UAAY,CAClBxB,IAAKyB,IAAUC,OAAOC,WACtB1B,IAAKwB,IAAUC,OAAOC,gBAyBRC,6MArBdC,MAAQ,CACPC,SAAS,2EAIT,OACCZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,OACdb,EAAAC,EAAAC,cAAA,UAAQW,UAAU,UACjBC,QAASnC,KAAKoC,SAASC,KAAKrC,KAAM,CAACiC,SAAUjC,KAAKgC,MAAMC,SAAU,OACjEjC,KAAKgC,MAAMC,QAAW,WAAe,cAEtCjC,KAAKgC,MAAMC,SACXZ,EAAAC,EAAAC,cAACe,EAAD,KACCjB,EAAAC,EAAAC,cAACG,EAAD,CAAQvB,IAAK,MAAOC,IAAK,iBAdbqB,aCDEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAchD,MAAMiD,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5dcbd212.chunk.js","sourcesContent":["\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./index.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./index.less\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./index.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/*** LESS COLORS ***/\\n/* Gray */\\n/*Серый фон */\\n/* Blue */\\n/* LESS OTHER */\\n.centerChildren {\\n  display: flex;\\n  align-items: center;\\n  align-content: center;\\n  justify-content: center;\\n}\\n/********* ALL *********/\\nhtml {\\n  height: 100%;\\n  min-height: 100%;\\n}\\nbody {\\n  height: 100%;\\n  font-family: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", \\\"Roboto\\\", \\\"Oxygen\\\", \\\"Ubuntu\\\", \\\"Cantarell\\\", \\\"Fira Sans\\\", \\\"Droid Sans\\\", \\\"Helvetica Neue\\\";\\n  background-color: #fff;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n  background-color: #ebebeb;\\n}\\n* {\\n  margin: 0;\\n  padding: 0;\\n  border: 0;\\n  outline: 0;\\n  -webkit-box-sizing: border-box;\\n  -moz-box-sizing: border-box;\\n  box-sizing: border-box;\\n}\\n#root {\\n  width: 100%;\\n  height: 100%;\\n  min-height: 100%;\\n}\\n.App {\\n  width: 100%;\\n  height: 100%;\\n  min-height: 100%;\\n}\\n.map-btn {\\n  display: block;\\n  width: 30%;\\n  height: 50px;\\n  font-size: 16px;\\n  color: #fff;\\n  -webkit-border-radius: 5px;\\n  -moz-border-radius: 5px;\\n  border-radius: 5px;\\n  background-color: #026791;\\n  margin: 50px auto;\\n  transition: background-color 0.3s;\\n}\\n.map-btn:hover {\\n  background-color: #0076ff;\\n}\\n\", \"\"]);\n\n// exports\n","\nvar content = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./Map.less\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./Map.less\", function() {\n\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js!../../node_modules/less-loader/dist/cjs.js!./Map.less\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/*** LESS COLORS ***/\\n/* Gray */\\n/*Серый фон */\\n/* Blue */\\n/* LESS OTHER */\\n.centerChildren {\\n  display: flex;\\n  align-items: center;\\n  align-content: center;\\n  justify-content: center;\\n}\\n#map {\\n  width: 75%;\\n  height: 80%;\\n  margin: 0 auto;\\n}\\n\", \"\"]);\n\n// exports\n","/* global ymaps */\r\n\r\nimport React, { Component } from 'react';\r\nimport './css/Map.less';\r\n\r\nclass Map extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tymaps.ready(() => {\r\n\t\t\tlet lat = 55.76;\r\n\t\t\tlet lon= 37.64;\r\n\t\t\tconst marker = this.props.children[0];\r\n\t\t\tif (React.isValidElement(marker)) {\r\n\t\t\t\tlat = marker.props.lan;\r\n\t\t\t\tlon = marker.props.lon;\r\n\t\t\t}\r\n\t\t\tvar myMap = new ymaps.Map(\"map\", {\r\n\t\t\t\tcenter: [lat, lon],\r\n\t\t\t\tzoom: 7\r\n\t\t\t});\r\n\t\t\tvar myPlacemark = new ymaps.GeoObject({\r\n\t\t\t\tgeometry: {\r\n\t\t\t\t\ttype: \"Point\",\r\n\t\t\t\t\tcoordinates: [lat, lon]\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tmyMap.geoObjects.add(myPlacemark);\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div id=\"map\">\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Map;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Map from './Map.js';\r\n\r\nconst Marker = () => false;\r\nMarker.propTypes = {\r\n\tlat: PropTypes.number.isRequired,\r\n\tlon: PropTypes.number.isRequired,\r\n};\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tshowMap: true,\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<button className=\"map-btn\" \r\n\t\t\t\t\tonClick={this.setState.bind(this, {showMap: !this.state.showMap}, null)}>\r\n\t\t\t\t\t{this.state.showMap ? ('Hide map') : ('Show map')}\r\n\t\t\t\t</button>\r\n\t\t\t\t{this.state.showMap ? (\r\n\t\t\t\t\t<Map>\r\n\t\t\t\t\t\t<Marker lat={55.76} lon={37.64}/>\r\n\t\t\t\t\t</Map>\r\n\t\t\t\t) : false}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.less';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}